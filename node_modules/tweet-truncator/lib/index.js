// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncate = truncate;
Object.defineProperty(exports, "TweetTruncator", {
  enumerable: true,
  get: function get() {
    return _tweetTruncator["default"];
  }
});

var _tweetTruncator = _interopRequireDefault(require("./tweet-truncator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * truncate contents object with maxLength.
 * @param {{
 *   desc?: string,
 *   quote?: string,
 *   title?: string,
 *   url?: string,
 *   tags?: string[]
 * }} contents
 * @param {object} options
 * @returns {string}
 */
function truncate(contents) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var maxLength = options.maxLength || 280; // default: 280

  var twitterTr = new _tweetTruncator["default"](options);

  var fixedContents = _objectSpread({
    desc: "",
    quote: "",
    title: "",
    url: "",
    tags: []
  }, contents);

  fixedContents.tags = fixedContents.tags.map(function (tag) {
    return "#".concat(tag);
  });
  var status = twitterTr.joinContents(fixedContents);
  var over = twitterTr.getTweetLength(status) - maxLength;

  if (over > 0) {
    return twitterTr.truncateStatus(fixedContents, over);
  }

  return status;
}
//# sourceMappingURL=index.js.map
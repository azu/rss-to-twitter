// LICENSE : MIT
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const twttr = __importStar(require("twitter-text"));
// DEBUG=TweetTruncator*
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("TweetTruncator");
const joinText = (array, separator) => {
    const isNotEmpty = (string) => {
        return string.length > 0;
    };
    return array.filter(isNotEmpty).join(separator);
};
const defaultOptions = {
    defaultPrefix: "",
    template: `%desc% "%title%" %url% %tags%`,
    truncatedOrder: ["tags", "title", "quote", "desc", "url"],
    // text…
    elisionMark: "…"
};
class TweetTruncator {
    constructor(options = {}) {
        this.template = options.template || defaultOptions.template;
        this.defaultPrefix = options.defaultPrefix || defaultOptions.defaultPrefix;
        this.truncatedOrder = options.truncatedOrder || defaultOptions.truncatedOrder;
        this.elisionMark = options.elisionMark || defaultOptions.elisionMark;
        this.twitterTextOptions = options.twitterTextOptions || {};
    }
    getTweetLength(str) {
        return twttr.getTweetLength(str, this.twitterTextOptions);
    }
    joinContents(contents) {
        let template = this.template;
        let { desc, quote, title, url, tags } = contents;
        let prefix = desc ? "" : this.defaultPrefix;
        return template
            ? this.extractTemplate(prefix, template, contents)
            : joinText([prefix, desc, quote, title, url, ...tags], " ");
    }
    extractTemplate(prefix, template, contents) {
        // @ts-expect-error: TODO: fix me
        contents.usage = {};
        let fixedTemplate = template
            .replace(/%(desc|quote|title|url|tags|br)%/g, (match, name) => {
            if (name === "br") {
                return "\n";
            }
            // @ts-expect-error: TODO: fix me
            contents.usage[name] = true;
            // @ts-expect-error: TODO: fix me
            return contents[name].length ? match : "";
        })
            .trim()
            .replace(/^ +| +$/gm, "")
            .replace(/ +/g, " ");
        return joinText([prefix, ...fixedTemplate.split(" ")].map((content) => content.replace(/%(desc|quote|title|url|tags)%/g, (match, name) => {
            // @ts-expect-error: TODO: fix me
            return name === "tags" ? contents.tags.join(" ") : contents[name];
        })), " ");
    }
    truncateStatus(contents, overLength = 0) {
        let over = overLength;
        let copiedContents = { ...contents };
        const elisionMark = this.elisionMark;
        const getTweetLength = this.getTweetLength.bind(this);
        const truncateContent = this.truncateContent.bind(this);
        let truncators = {
            tags: (array) => {
                let arr = array.slice();
                copiedContents.tags = arr
                    .reverse()
                    .filter((tag) => {
                    if (over <= 0) {
                        return true;
                    }
                    over -= tag.length;
                })
                    .reverse();
                debug(`tags: ${arr.length} -> ${copiedContents.tags.length}`);
                if (copiedContents.tags.length || over <= 0) {
                    return true;
                }
            },
            title: (string) => {
                let str = truncateContent(string, over + elisionMark.length);
                debug(`[TITLE] over: ${over}
${string}
                ->
${str.length ? str : "[DELETE]"}`);
                if (str) {
                    copiedContents.title = str + elisionMark;
                }
                else {
                    over -= getTweetLength(string) + 1;
                    copiedContents.title = str;
                    if (over > 0) {
                        return false;
                    }
                }
                return true;
            },
            quote: (string) => {
                let str = truncateContent(string.slice(1, -1), over + elisionMark.length);
                debug(`[Quote] over: ${over}
${string}
                ->
${str.length ? str : "[DELETE]"}`);
                if (str) {
                    copiedContents.quote = `${str}${elisionMark}`;
                }
                else {
                    over -= getTweetLength(string) + 1;
                    copiedContents.quote = str;
                    if (over > 0) {
                        return false;
                    }
                }
                return true;
            },
            desc: (string) => {
                var str = truncateContent(string, over + elisionMark.length) + elisionMark;
                copiedContents.desc = str;
                debug(`[DESC] over: ${over}
${string}
                ->
${str.length ? str : "[DELETE]"}`);
                return true;
            },
            url: (string) => {
                // no change
                return true;
            }
        };
        for (var i = 0; i < this.truncatedOrder.length - 1; i++) {
            if (over <= 0) {
                break;
            }
            const truncatorName = this.truncatedOrder[i];
            // @ts-expect-error: TODO: fix me
            if (copiedContents.usage && !copiedContents.usage[truncatorName]) {
                // @ts-expect-error: TODO: fix me
                copiedContents[truncatorName] = truncatorName === "tags" ? [] : "";
            }
            // @ts-expect-error: TODO: fix me
            const content = copiedContents[truncatorName];
            // @ts-expect-error: TODO: fix me
            const truncate = truncators[truncatorName];
            if (content.length && truncate(content)) {
                break;
            }
        }
        return this.joinContents(copiedContents);
    }
    truncateContent(content, overLength) {
        // for surrogate pair
        let strArr = [...content];
        let urls = twttr.extractUrlsWithIndices(content).reverse();
        let twLen = this.getTweetLength(content);
        let over = overLength;
        if (!urls.length || twLen <= over + 1) {
            return strArr.slice(0, -(over + 1)).join("");
        }
        for (var i = 0; i < urls.length; i++) {
            const indices = urls[i].indices;
            const start = indices[0];
            const end = indices[1];
            let len = strArr.length;
            if (over < len - end) {
                break;
            }
            strArr = strArr.slice(0, start - (len === end ? end : len));
            over -= twLen - this.getTweetLength(strArr.join(""));
            if (over < 0) {
                break;
            }
            twLen = this.getTweetLength(strArr.join(""));
        }
        if (over >= 0) {
            strArr = strArr.slice(0, -(over + 1));
        }
        return strArr.join("");
    }
}
exports.default = TweetTruncator;

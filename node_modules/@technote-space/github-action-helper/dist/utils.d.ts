import { Context } from '@actions/github/lib/context';
import { Octokit } from '@octokit/rest';
export declare const getBuildInfo: (filepath: string) => false | {
    owner?: string | undefined;
    repo?: string | undefined;
    sha?: string | undefined;
    ref?: string | undefined;
    tagName: string;
    branch: string;
    tags: string[];
    updated_at: string;
};
export declare const isCloned: (workDir: string) => boolean;
export declare const isSemanticVersioningTagName: (tagName: string) => boolean;
export declare const isRef: (ref: string | Context) => boolean;
export declare const isBranch: (ref: string | Context) => boolean;
export declare const isTagRef: (ref: string | Context) => boolean;
export declare const isRemoteBranch: (ref: string | Context) => boolean;
export declare const isPrRef: (ref: string | Context) => boolean;
export declare const getPrMergeRef: (ref: string | Context) => string;
export declare const getPrHeadRef: (ref: string | Context) => string;
export declare const getRefForUpdate: (ref: string | Context) => string;
export declare const getBranch: (ref: string | Context, defaultIsEmpty?: boolean) => string;
export declare const getPrBranch: (context: Context) => string;
export declare const normalizeRef: (ref: string | Context) => string;
export declare const trimRef: (ref: string | Context) => string;
export declare const getTag: (ref: string | Context) => string;
export declare const getRemoteRefspec: (ref: string | Context) => string;
export declare const getLocalRefspec: (ref: string | Context, origin?: string) => string;
export declare const getRefspec: (ref: string | Context, origin?: string) => string;
export declare const getAccessToken: (required: boolean) => string;
export declare const getOctokit: (token?: string | undefined) => Octokit;
export declare const getActor: () => string;
export declare const escapeRegExp: (text: string) => string;
export declare const getRegExp: (value: string) => RegExp;
export declare const getPrefixRegExp: (value: string) => RegExp;
export declare const getSuffixRegExp: (value: string) => RegExp;
export declare const getBoolValue: (input: string) => boolean;
export declare const uniqueArray: <T>(array: T[]) => T[];
export declare const getWorkspace: () => string;
export declare const split: (value: string, separator?: string | RegExp, limit?: number | undefined) => string[];
export declare const getArrayInput: (name: string, required?: boolean, separator?: string, unique?: boolean) => string[];
export declare const sleep: (millisecond: number) => Promise<void>;
export declare const useNpm: (workDir: string, pkgManager?: string) => boolean;
export declare const replaceAll: (string: string, key: string | RegExp, value: string) => string;
export declare const generateNewVersion: (lastTag: string, position?: number | undefined) => string;
export declare const generateNewPatchVersion: (lastTag: string) => string;
export declare const generateNewMinorVersion: (lastTag: string) => string;
export declare const generateNewMajorVersion: (lastTag: string) => string;
export declare const arrayChunk: <T>(array: T[], size?: number) => T[][];
export declare const versionCompare: (version1: string, version2: string, checkDifferentLevel?: boolean) => number;
export declare const mask: (value: object, target?: string) => object;
export declare const replaceVariables: (string: string, variables: {
    key: string;
    replace: string | (() => string | Promise<string>);
}[]) => Promise<string>;

import { Context } from '@actions/github/lib/context';
import { Octokit } from '@octokit/rest';
import { Logger } from './index';
declare type PullsUpdateParams = {
    body?: string;
    draft?: boolean;
    state?: 'open' | 'closed' | undefined;
    title?: string;
    base?: string;
};
declare type PullsCreateParams = PullsUpdateParams & {
    title: string;
};
declare type PullsInfo = {
    'html_url': string;
    'commits_url': string;
    'comments_url': string;
    id: number;
    number: number;
    isPrCreated: boolean;
};
declare type PullsListParams = {
    base?: string;
    direction?: 'asc' | 'desc';
    head?: string;
    sort?: 'created' | 'updated' | 'popularity' | 'long-running';
    state?: 'open' | 'closed' | 'all';
};
/**
 * API Helper
 */
export default class ApiHelper {
    private readonly octokit;
    private readonly context;
    private readonly logger?;
    private readonly branch?;
    private readonly sender?;
    private readonly suppressBPError?;
    private readonly refForUpdate?;
    private prCache;
    /**
     * @param {Octokit} octokit octokit
     * @param {Context} context context
     * @param {Logger} logger logger
     * @param {object} options options
     * @param {string|undefined} options.branch branch
     * @param {string|undefined} options.sender sender
     * @param {string|undefined} options.refForUpdate ref for update
     * @param {boolean|undefined} options.suppressBPError suppress branch protection error?
     */
    constructor(octokit: Octokit, context: Context, logger?: Logger | undefined, options?: {
        branch?: string;
        sender?: string;
        refForUpdate?: string;
        suppressBPError?: boolean;
    });
    /**
     * @param {function} caller caller
     */
    private callLogger;
    /**
     * @return {string|boolean} sender
     */
    private getSender;
    /**
     * @param {boolean} encode encode?
     * @return {string} ref for update
     */
    getRefForUpdate: (encode: boolean) => Promise<string>;
    /**
     * @param {string} rootDir root dir
     * @param {string} filepath filepath
     * @return {Promise<{ path: string, sha: string }>} blob
     */
    private createBlob;
    /**
     * @return {string} commit sha
     */
    private getCommitSha;
    /**
     * @return {Promise<Octokit.Response<Octokit.GitGetCommitResponse>>} commit
     */
    private getCommit;
    /**
     * @return {Promise<Octokit.Response<Octokit.PullsGetResponse>>} commit
     */
    private getPR;
    /**
     * @param {string} rootDir root dir
     * @param {object} files files
     * @return {Promise<{ path: string, sha: string }[]>} blobs
     */
    filesToBlobs: (rootDir: string, files: object) => Promise<{
        path: string;
        sha: string;
    }[]>;
    /**
     * @param {{ path: string, sha: string }[]} blobs blobs
     * @return {Promise<Octokit.Response<Octokit.GitCreateTreeResponse>>} tree
     */
    createTree: (blobs: {
        path: string;
        sha: string;
    }[]) => Promise<Octokit.Response<Octokit.GitCreateTreeResponse>>;
    /**
     * @param {string} commitMessage commit message
     * @param {Octokit.Response<Octokit.GitCreateTreeResponse>} tree tree
     * @return {Promise<Octokit.Response<Octokit.GitCreateCommitResponse>>} commit
     */
    createCommit: (commitMessage: string, tree: Octokit.Response<Octokit.GitCreateTreeResponse>) => Promise<Octokit.Response<Octokit.GitCreateCommitResponse>>;
    /**
     * @param {string} refName refName
     * @return {Promise<Octokit.AnyResponse|null>} refName
     */
    private getRef;
    /**
     * @param {Octokit.Response<Octokit.GitCreateCommitResponse>} commit commit
     * @param {string} refName refName
     * @param {boolean} force force
     * @return {Promise<void>} void
     */
    updateRef: (commit: Octokit.Response<Octokit.GitCreateCommitResponse>, refName: string, force: boolean) => Promise<boolean>;
    /**
     * @param {Octokit.Response<Octokit.GitCreateCommitResponse>} commit commit
     * @param {string} refName refName
     * @return {Promise<void>} void
     */
    createRef: (commit: Octokit.Response<Octokit.GitCreateCommitResponse>, refName: string) => Promise<void>;
    /**
     * @param {string} refName refName
     * @return {Promise<void>} void
     */
    deleteRef: (refName: string) => Promise<void>;
    /**
     * @param {string} branchName branch name
     * @return {Promise<Octokit.PullsListResponseItem>} pull request
     */
    findPullRequest: (branchName: string) => Promise<Octokit.PullsListResponseItem | null>;
    /**
     * @param {PullsListParams} params params
     * @return {AsyncIterable<Octokit.PullsListResponseItem>} pull request list
     */
    pullsList: (params: PullsListParams) => Promise<Octokit.PullsListResponse>;
    /**
     * @param {string} branchName branch name
     * @param {PullsCreateParams} detail detail
     * @return {Promise<Octokit.Response<Octokit.PullsCreateResponse>>} pull
     */
    pullsCreate: (branchName: string, detail: PullsCreateParams) => Promise<Octokit.Response<Octokit.PullsCreateResponse>>;
    /**
     * @param {number} number pull number
     * @param {PullsUpdateParams} detail detail
     * @return {Promise<Octokit.Response<Octokit.PullsUpdateResponse>>} pull
     */
    pullsUpdate: (number: number, detail: PullsUpdateParams) => Promise<Octokit.Response<Octokit.PullsUpdateResponse>>;
    /**
     * @param {string} branch branch
     * @return {object} branch info
     */
    getBranchInfo: (branch: string) => {
        branchName: string;
        headName: string;
        refName: string;
    };
    /**
     * @param {string} createBranchName branch name
     * @param {PullsCreateParams} detail detail
     * @return {Promise<PullsInfo>} info
     */
    private createPulls;
    /**
     * @param {string} createBranchName branch name
     * @param {PullsCreateParams} detail detail
     * @return {Promise<PullsInfo>} info
     */
    pullsCreateOrUpdate: (createBranchName: string, detail: PullsCreateParams) => Promise<PullsInfo>;
    /**
     * @param {string} createBranchName branch name
     * @param {PullsCreateParams} detail detail
     * @return {Promise<PullsInfo>} info
     */
    pullsCreateOrComment: (createBranchName: string, detail: PullsCreateParams) => Promise<PullsInfo>;
    /**
     * @param {string} branch branch
     * @param {string} body body
     * @return {Promise<boolean>} result
     */
    createCommentToPr: (branch: string, body: string | undefined) => Promise<boolean>;
    /**
     * @param {Error} error error
     * @return {boolean} result
     */
    private isProtectedBranchError;
    /**
     * @param {string[]} files files
     * @return {boolean} diff?
     */
    private checkDiff;
    /**
     * @param {string} rootDir root dir
     * @param {string} commitMessage commit message
     * @param {string[]} files files
     * @return {Promise<Octokit.Response<Octokit.GitCreateCommitResponse>>} commit
     */
    private prepareCommit;
    /**
     * @param {string} rootDir root dir
     * @param {string} commitMessage commit message
     * @param {string[]} files files
     * @return {Promise<boolean>} result
     */
    commit: (rootDir: string, commitMessage: string, files: string[]) => Promise<boolean>;
    /**
     * @param {string} rootDir root dir
     * @param {string} commitMessage commit message
     * @param {string[]} files files
     * @param {string} createBranchName branch name
     * @param {PullsCreateParams} detail detail
     * @return {Promise<boolean|PullsInfo>} result
     */
    createPR: (rootDir: string, commitMessage: string, files: string[], createBranchName: string, detail: PullsCreateParams) => Promise<boolean | PullsInfo>;
    /**
     * @param {string} createBranchName branch name
     * @param {string} message message
     */
    closePR: (createBranchName: string, message?: string | undefined) => Promise<void>;
    /**
     * @return {Promise<{ login: string, email: string, name: string, id: number }>} user
     */
    getUser: () => Promise<{
        login: string;
        email: string;
        name: string;
        id: number;
    }>;
    /**
     * @return {Promise<string>} default branch
     */
    getDefaultBranch: () => Promise<string>;
    /**
     * @return {Promise<Array<string>>} tags
     */
    getTags: () => Promise<string[]>;
    /**
     * @return {Promise<string>} tag
     */
    getLastTag: () => Promise<string>;
    /**
     * @return {Promise<string>} tag
     */
    getNewPatchVersion: () => Promise<string>;
    /**
     * @return {Promise<string>} tag
     */
    getNewMinorVersion: () => Promise<string>;
    /**
     * @return {Promise<string>} tag
     */
    getNewMajorVersion: () => Promise<string>;
}
export {};
